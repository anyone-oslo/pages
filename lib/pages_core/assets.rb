# encoding: utf-8

module PagesCore
	module Assets
		class << self
			ASSETS_ROOT = 'app/assets'

			def recipes(asset_type)
				# Application assets
				recipes = [{
					:source => File.join(RAILS_ROOT, ASSETS_ROOT, asset_type.to_s),
					:target => File.join(RAILS_ROOT, 'public', asset_type.to_s)
				}]

				# Plugin assets
				Dir.entries(File.join(RAILS_ROOT, 'vendor/plugins')).each do |plugin|
					plugin_root = File.join(RAILS_ROOT, 'vendor/plugins', plugin)
					if File.exists?(File.join(plugin_root, ASSETS_ROOT))
						recipes << {
							:source => File.join(plugin_root, ASSETS_ROOT, asset_type.to_s),
							:target => File.join(RAILS_ROOT, 'public/plugin_assets', plugin, asset_type.to_s)
						}
					end
				end

				recipes
			end

			def javascripts
				files = []
				recipes(:javascripts).each do |recipe|
					Find.find(recipe[:source]) do |path|
						if path =~ /\.(js|coffee)$/
							relative_path = path.gsub(Regexp.new("^#{Regexp.escape(recipe[:source])}/?"),'')
							files << {
								:name   => relative_path,
								:source => path,
								:target => File.join(recipe[:target], relative_path).gsub(/\.coffee$/, '.js')
							}
						end
					end
				end
				files
			end

			def stylesheets
				files = []
				recipes(:stylesheets).each do |recipe|
					Find.find(recipe[:source]) do |path|
						if path =~ /\.(css)$/
							relative_path = path.gsub(Regexp.new("^#{Regexp.escape(recipe[:source])}/?"),'')
							files << {
								:name   => relative_path,
								:source => path,
								:target => File.join(recipe[:target], relative_path)
							}
						end
					end
				end
				files
			end

			def images
				files = []
				recipes(:images).each do |recipe|
					Find.find(recipe[:source]) do |path|
						if path =~ /\.(png|gif|jpg|jpeg)$/
							relative_path = path.gsub(Regexp.new("^#{Regexp.escape(recipe[:source])}/?"),'')
							files << {
								:name   => relative_path,
								:source => path,
								:target => File.join(recipe[:target], relative_path)
							}
						end
					end
				end
				files
			end

			def compile_javascripts(options={})
				options = {
					:force => false
				}.merge(options)

				javascripts.each do |script|
					source_time = File.mtime(script[:source])
					target_time = File.mtime(script[:target]) rescue 0

					if options[:force] || !File.exists?(script[:target]) || source_time > target_time
						source = File.read(script[:source])
						if script[:name] =~ /\.coffee$/
							source = CoffeeScript.compile(source)
						end
						FileUtils.mkdir_p File.dirname(script[:target])
						File.open(script[:target], 'w') do |fh|
							fh.write "/* THIS FILE IS AUTOMATICALLY GENERATED */\n\n"
							fh.write source
						end
					end
				end
			end

			def compile_stylesheets(options={})
				options = {
					:force => false
				}.merge(options)

				stylesheets.each do |stylesheet|
					source_time = File.mtime(stylesheet[:source])
					target_time = File.mtime(stylesheet[:target]) rescue 0

					if options[:force] || !File.exists?(stylesheet[:target]) || source_time > target_time
						source = File.read(stylesheet[:source])
						FileUtils.mkdir_p File.dirname(stylesheet[:target])
						File.open(stylesheet[:target], 'w') do |fh|
							fh.write "/* THIS FILE IS AUTOMATICALLY GENERATED */\n\n"
							fh.write source
						end
					end
				end
			end

			def compile_images(options={})
				options = {
					:force => false
				}.merge(options)

				images.each do |image|
					source_time = File.mtime(image[:source])
					target_time = File.mtime(image[:target]) rescue 0

					if options[:force] || !File.exists?(image[:target]) || source_time > target_time
						FileUtils.mkdir_p File.dirname(image[:target])
						FileUtils.cp(image[:source], image[:target])
					end
				end
			end

			def compile!(options={})
				compile_javascripts(options)
				compile_stylesheets(options)
				compile_images(options)
			end
		end
	end
end